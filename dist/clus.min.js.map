{"version":3,"file":null,"sources":["../src/core/utils.js","../src/core/init.js","../src/core/extend.js","../src/core/event.js","../src/core/search.js","../src/core/instance.js","../src/core/dom/ready.js","../src/core/dom/append.js","../src/core/dom/class.js","../src/core/dom/parseHTML.js","../src/core/core.js"],"sourcesContent":["//\n// utils.js\n//\n\nexport function rootQuery(selector) {\n    return document.querySelectorAll(selector);\n}\n\nexport function trim(text) {\n    const rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    return text == null ? '' : `${text}`.replace(rtrim, '');\n}\n\nexport function type(object) {\n    let class2type = {},\n        type = class2type.toString.call(object),\n        typeString = 'Boolean Number String Function Array Date RegExp Object Error Symbol';\n\n    if (object == null) {\n        return object + '';\n    }\n\n    typeString.split(' ').forEach((type) => {\n        class2type[`[object ${type}]`] = type.toLowerCase();\n    });\n\n    return (\n        typeof object === 'object' ||\n        typeof object === 'function'\n        ?\n        class2type[type] || 'object'\n        :\n        typeof object\n    );\n}\n\nexport function isPlainObject(object) {\n    let proto,\n        ctor,\n        class2type = {},\n        toString = class2type.toString, // Object.prototype.toString\n        hasOwn = class2type.hasOwnProperty,\n        fnToString = hasOwn.toString, // Object.toString/Function.toString\n        ObjectFunctionString = fnToString.call( Object ); // 'function Object() { [native code] }'\n\n    if (!object || toString.call(object) !== '[object Object]') {\n        return false;\n    }\n\n    // According to the object created by `Object.create(null)` is no `prototype`\n    proto = Object.getPrototypeOf(object);\n    if (!proto) {\n        return true;\n    }\n\n    ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n    return typeof ctor === 'function' && fnToString.call( ctor ) === ObjectFunctionString;\n}\n\nexport function merge(first, second) {\n    let length = +second.length,\n\t\tj = 0,\n\t\ti = first.length;\n\n\tfor ( ; j < length; j++ ) {\n\t\tfirst[ i++ ] = second[ j ];\n\t}\n\n\tfirst.length = i;\n\n\treturn first;\n}\n\nexport function unique(array) {\n    let unique = [], i = 0, len = array.length;\n    for (; i < len; i++) {\n        if (unique.indexOf(array[i]) === -1) {\n            unique.push(array[i]);\n        }\n    }\n    return unique;\n}\n\nexport function matches(element, selector) {\n    if (!selector || !element || element.nodeType !== 1) return false;\n\n    let matchesSelector = element.matchesSelector || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector;\n\n    return matchesSelector.call(element, selector);\n}\n","//\n// init.js\n//\n\nexport default function init(selector = '') {\n    let dom,\n        fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\n        selectorType = Clus.type(selector),\n        elementTypes = [1, 9, 11];\n\n    if (!selector) {\n        dom = [],\n        dom.selector = selector;\n    } else if (elementTypes.indexOf(selector.nodeType) !== -1 || selector === window) {\n        dom = [selector],\n        selector = null;\n    } else if (selectorType === 'function') {\n        return Clus(document).ready(selector);\n    } else if (selectorType === 'array') {\n        dom = selector;\n    } else if (selectorType === 'object') {\n        dom = [selector],\n        selector = null;\n    } else if (selectorType === 'string') {\n        if (selector[0] === '<' && fragmentRE.test(selector)) {\n            dom = Clus.parseHTML(selector),\n            selector = null;\n        } else {\n            dom = [].slice.call(document.querySelectorAll(selector));\n        }\n    }\n\n    dom = dom || [];\n    Clus.extend(dom, Clus.fn);\n    dom.selector = selector;\n\n    return dom;\n}\n","//\n// extend.js\n//\n\nimport { isPlainObject, type } from './utils.js';\n\nexport default function extend() {\n    let options, name, clone, copy, source, copyIsArray,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    if (typeof target === 'boolean') {\n        deep = target;\n        target = arguments[i] || {};\n        i++;\n    }\n\n    if (typeof target !== 'object' && type(target) !== 'function') {\n        target = {};\n    }\n\n    if (i === length) {\n        target = this;\n        i--;\n    }\n\n    for (; i < length; i++) {\n        //\n        if ((options = arguments[i]) !== null) {\n            // for in source object\n            for (name in options) {\n\n                source = target[name];\n                copy = options[name];\n\n                if (target == copy) {\n                    continue;\n                }\n\n                // deep clone\n                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                    // if copy is array\n                    if (copyIsArray) {\n                        copyIsArray = false;\n                        // if is not array, set it to array\n                        clone = source && Array.isArray(source) ? source : [];\n                    } else {\n                        // if copy is not a object, set it to object\n                        clone = source && isPlainObject(source) ? source : {};\n                    }\n\n                    target[name] = extend(deep, clone, copy);\n                } else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    return target;\n}\n","//\n// event\n//\n\nexport function on(eventName, selector, handler, capture) {\n    let events = eventName.split(' '), i, j;\n\n    for (i = 0; i < this.length; i++) {\n        if (Clus.type(selector) === 'function' || selector === false) {\n            // Usual events\n            if (Clus.type(selector) === 'function') {\n                handler = arguments[1];\n                capture = arguments[2] || false;\n            }\n            for (j = 0; j < events.length; j++) {\n                // check for namespaces\n                if (events[j].indexOf('.') != -1) {\n                    handleNamespaces(this[i], events[j], handler, capture);\n                } else {\n                    this[i].addEventListener(events[j], handler, capture);\n                }\n            }\n        } else {\n            // Live events\n            for (j = 0; j < events.length; j++) {\n                if (!this[i].DomLiveListeners) {\n                    this[i].DomLiveListeners = [];\n                }\n\n                this[i].DomLiveListeners.push({\n                    handler: handler,\n                    liveListener: handleLiveEvent\n                });\n\n                if (events[j].indexOf('.') != -1) {\n                    handleNamespaces(this[i], events[j], handleLiveEvent, capture);\n                } else {\n                    this[i].addEventListener(events[j], handleLiveEvent, capture);\n                }\n            }\n        }\n    }\n\n    function handleLiveEvent(event) {\n        let k,\n            parents,\n            target = event.target;\n\n        if (Clus(target).is(selector)) {\n            handler.call(target, event);\n        } else {\n            parents = Clus(target).parents();\n            for (k = 0; k < parents.length; k++) {\n                if (Clus(parents[k]).is(selector)) {\n                    handler.call(parents[k], event);\n                }\n            }\n        }\n    }\n\n    function handleNamespaces(elm, name, handler, capture) {\n        let namespace = name.split('.');\n\n        if (!elm.DomNameSpaces) {\n            elm.DomNameSpaces = [];\n        }\n\n        elm.DomNameSpaces.push({\n            namespace: namespace[1],\n            event: namespace[0],\n            handler: handler,\n            capture: capture\n        });\n\n        elm.addEventListener(namespace[0], handler, capture);\n    }\n\n    return this;\n}\n\nexport function off(eventName, selector, handler, capture) {\n    let events,\n        i, j, k,\n        that = this;\n\n    events = eventName.split(' ');\n\n    for (i = 0; i < events.length; i++) {\n        for (j = 0; j < this.length; j++) {\n            if (Clus.type(selector) === 'function' || selector === false) {\n                // Usual events\n                if (Clus.type(selector) === 'function') {\n                    handler = arguments[1];\n                    capture = arguments[2] || false;\n                }\n\n                if (events[i].indexOf('.') === 0) { // remove namespace events\n                    removeEvents(events[i].substr(1), handler, capture);\n                } else {\n                    this[j].removeEventListener(events[i], handler, capture);\n                }\n            } else {\n                // Live event\n                if (this[j].DomLiveListeners) {\n                    for (k = 0; k < this[j].DomLiveListeners.length; k++) {\n                        if (this[j].DomLiveListeners[k].handler === handler) {\n                            this[j].removeEventListener(events[i], this[j].DomLiveListeners[k].liveListener, capture);\n                        }\n                    }\n                }\n                if (this[j].DomNameSpaces && this[j].DomNameSpaces.length && events[i]) {\n                    removeEvents(events[i]);\n                }\n            }\n        }\n    }\n\n    function removeEvents(event) {\n        let i, j,\n            item,\n            parts = event.split('.'),\n            name = parts[0],\n            ns = parts[1];\n\n        for (i = 0; i < that.length; ++i) {\n            if (that[i].DomNameSpaces) {\n                for (j = 0; j < that[i].DomNameSpaces.length; ++j) {\n                    item = that[i].DomNameSpaces[j];\n\n                    if (item.namespace == ns && (item.event == name || !name)) {\n                        that[i].removeEventListener(item.event, item.handler, item.capture);\n                        item.removed = true;\n                    }\n                }\n                // remove the events from the DomNameSpaces array\n                for (j = that[i].DomNameSpaces.length - 1; j >= 0; --j) {\n                    if (that[i].DomNameSpaces[j].removed) {\n                        that[i].DomNameSpaces.splice(j, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    return this;\n}\n\nexport default {\n    on,\n    off,\n};\n","//\n// search.js\n//\n\nimport { merge, unique } from './utils.js';\n\nfunction pushStack(els) {\n    let ret = merge(this.contructor(), els);\n    ret.prevObject = this;\n    return ret;\n}\n\nfunction find(selector) {\n    let i = 0,\n        el,\n        ret = this.pushStack([]);\n\n    while((el = this[i++])) {\n        ret = merge(ret, el.querySelectorAll(selector));\n    }\n\n    return ret;\n}\n\nfunction end() {\n    return this.prevObject || this.contructor();\n}\n\nfunction eq(i) {\n    let len = this.length,\n        j = +i + ( i < 0 ? len : 0 ); // reverse find\n    return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n}\n\nfunction first() {\n    return this.eq(0);\n}\n\nfunction last() {\n    return this.eq(-1);\n}\n\nfunction parent(selector) {\n    let parents = [], i = 0, len = this.length;\n    for (; i < len; i++) {\n        if (this[i].parentNode !== null) {\n            if (selector) {\n                if (Clus(this[i].parentNode).is(selector)) {\n                    parents.push(this[i].parentNode);\n                }\n            } else {\n                parents.push(this[i].parentNode);\n            }\n        }\n    }\n    parents = unique(parents)\n    return Clus(parents);\n}\n\nfunction parents(selector) {\n    let parent, parents = [], i = 0, len = this.length;\n    for (; i < len; i++) {\n        parent = this[i].parentNode;\n        while (parent) {\n            if (selector) {\n                if (Clus(parent).is(selector)) {\n                    parents.push(parent);\n                }\n            } else {\n                parents.push(parent);\n            }\n            parent = parent.parentNode;\n        }\n    }\n    parents = unique(parents);\n    return Clus(parents);\n}\n\nexport default {\n    pushStack,\n    find,\n    end,\n    eq,\n    first,\n    last,\n    parent,\n    parents,\n};\n","//\n// instance methods\n//\n\nexport function is(selector) {\n    return this.length > 0 && Clus.matches(this[0], selector);\n}\n\nexport default {\n    is,\n};\n","//\n// ready.js\n//\n\nexport default function ready(callback) {\n    if (\n        document\n        &&\n        /complete|loaded|interactive/.test(document.readyState)\n        &&\n        document.body\n    ) {\n        callback();\n    } else {\n        document.addEventListener('DOMContentLoaded', function () {\n            callback();\n        }, false);\n    }\n\n    return this;\n}\n","//\n// append.js\n//\n\nexport function appendTo(selector) {\n    let fregment, i = 0,\n        elCollection = Clus.find(selector),\n        els = Array.prototype.slice.apply(elCollection);\n\n    while((fregment = this[i++])) {\n        els.map(el => {\n            el.appendChild(fregment);\n        });\n    }\n}\n\nexport function append(DOMString) {\n    let el, i = 0,\n        fregmentCollection = Clus.parseHTML(DOMString),\n        fregments = Array.prototype.slice.apply(fregmentCollection);\n\n    while((el = this[i++])) {\n        fregments.map(fregment => {\n            el.appendChild(fregment);\n        });\n    }\n\n    return this;\n}\n","//\n// classes.js\n//\n\nconst rnotwhite = /\\S+/g;\nconst rclass = /[\\t\\r\\n\\f]/g;\n\nexport function getClass(el) {\n    return el.getAttribute && el.getAttribute('class') || '';\n}\n\nexport function addClass(cls) {\n    let classes, clazz, el, cur, curValue, finalValue, j, i = 0;\n\n    if (typeof cls === 'string' && cls) {\n        classes = cls.match(rnotwhite) || [];\n\n        while((el = this[i++])) {\n            curValue = getClass(el);\n            cur = (el.nodeType === 1) && ` ${curValue} `.replace(rclass, ' ');\n\n            if (cur) {\n                j = 0;\n\n                while((clazz = classes[j++])) {\n                    // to determine whether the class that to add has already existed\n                    if (cur.indexOf(` ${clazz} `) == -1) {\n                        cur += clazz + ' ';\n                    }\n                    finalValue = Clus.trim(cur);\n                    if ( curValue !== finalValue ) {\n                        el.setAttribute('class', finalValue);\n                    }\n                }\n            }\n        }\n    }\n\n    return this;\n}\n\nexport function removeClass(cls) {\n    let classes, clazz, el, cur, curValue, finalValue, j, i = 0;\n\n    if (!arguments.length) {\n        return;\n    }\n\n    if (typeof cls === 'string' && cls) {\n        classes = cls.match(rnotwhite) || [];\n\n        while((el = this[i++])) {\n            curValue = getClass(el);\n            cur = (el.nodeType === 1) && ` ${curValue} `.replace(rclass, ' ');\n\n            if (cur) {\n                j = 0;\n\n                while((clazz = classes[j++])) {\n                    // to determine whether the class that to add has already existed\n                    if (cur.indexOf(` ${clazz} `) !== -1) {\n                        cur = cur.replace(` ${clazz} `, ' ');\n                    }\n                    finalValue = Clus.trim(cur);\n                    if ( curValue !== finalValue ) {\n                        el.setAttribute('class', finalValue);\n                    }\n                }\n            }\n        }\n    }\n\n    return this;\n}\n\nexport function hasClass(cls) {\n    let el, i = 0, className = ` ${cls} `;\n\n    while((el = this[i++])) {\n        if (\n            el.nodeType === 1\n            &&\n            ` ${getClass(el)} `.replace(rclass, ' ').indexOf(className) !== -1\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function toggleClass(cls) {\n    let el, i = 0;\n\n    while((el = this[i++])) {\n        if (this.hasClass(cls)) {\n            this.removeClass(cls);\n            return this;\n        } else {\n            this.addClass(cls);\n            return this;\n        }\n    }\n}\n\nexport default {\n    addClass,\n    removeClass,\n    hasClass,\n    toggleClass,\n};\n","//\n// parseHTML\n//\n\nexport default function parseHTML(DOMString) {\n    let htmlDoc = document.implementation.createHTMLDocument();\n    htmlDoc.body.innerHTML = DOMString;\n    return htmlDoc.body.children;\n}\n","//\n// Core.js\n//\n\nimport { rootQuery, merge, trim, type, unique, matches } from './utils.js';\nimport init from './init.js';\nimport extend from './extend.js';\nimport event from './event.js';\nimport search from './search.js';\nimport instance from './instance.js';\nimport DOM from './dom/index.js';\nimport parseHTML from './dom/parseHTML.js';\n\nexport default function Clus (selector) {\n    return new Clus.fn.init(selector);\n}\n\nClus.fn = Clus.prototype = {\n    contructor: Clus,\n    init,\n};\n\nClus.fn.init.prototype = Clus.fn;\n\nClus.extend = Clus.fn.extend = extend;\n\n// ====================================\n// extend Clus methods\n// ====================================\n\nClus.extend({\n    find: rootQuery,\n    merge,\n    trim,\n    type,\n    parseHTML,\n    unique,\n    matches,\n});\n\n// ====================================\n// extend instance methods\n// ====================================\n\nClus.fn.extend(instance);\nClus.fn.extend(event);\n\n// ====================================\n// extend selector\n// ====================================\n\nClus.fn.extend(search);\n\n// ====================================\n// extend DOM methods\n// ====================================\nClus.fn.extend(DOM);\n\nwindow.Clus = window.C = window.$ = Clus;\n"],"names":["rootQuery","selector","document","querySelectorAll","trim","text","rtrim","replace","type","object","class2type","toString","call","typeString","split","forEach","toLowerCase","isPlainObject","proto","ctor","hasOwnProperty","fnToString","hasOwn","Object","getPrototypeOf","constructor","ObjectFunctionString","merge","first","second","length","j","i","unique","array","len","indexOf","push","matches","element","nodeType","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","init","dom","fragmentRE","selectorType","Clus","elementTypes","window","ready","test","parseHTML","slice","extend","fn","options","name","clone","copy","source","copyIsArray","target","arguments","deep","this","Array","isArray","undefined","on","eventName","handler","capture","handleLiveEvent","event","k","parents","is","handleNamespaces","elm","namespace","DomNameSpaces","addEventListener","events","DomLiveListeners","off","removeEvents","item","parts","ns","that","removeEventListener","removed","splice","substr","liveListener","pushStack","els","ret","contructor","prevObject","find","el","end","eq","last","parent","parentNode","callback","readyState","body","appendTo","fregment","elCollection","prototype","apply","map","appendChild","append","DOMString","fregmentCollection","fregments","getClass","getAttribute","addClass","cls","classes","clazz","cur","curValue","finalValue","match","rnotwhite","rclass","setAttribute","removeClass","hasClass","className","toggleClass","htmlDoc","implementation","createHTMLDocument","innerHTML","children","instance","search","DOM","C","$"],"mappings":"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"}